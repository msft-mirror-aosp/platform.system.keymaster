// Copyright (C) 2014 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//##
// libkeymaster_messages contains just the code necessary to communicate with a
// GoogleKeymaster implementation, e.g. one running in TrustZone.
//#
cc_library_shared {
    name: "libkeymaster_messages",
    srcs: [
        "authorization_set.cpp",
        "google_keymaster_messages.cpp",
        "google_keymaster_utils.cpp",
        "key_blob.cpp",
        "logger.cpp",
        "serializable.cpp",
    ],
    local_include_dirs: ["include"],
    cflags: [
        "-Wall",
        "-Werror",
    ],
    tags: ["optional"],
    export_include_dirs: ["include"],
}

//##
// libkeymaster1 contains almost everything needed for a keymaster1
// implementation, lacking only a subclass of the (abstract) GoogleKeymaster
// class to provide environment-specific services and a wrapper to translate from
// the function-based keymaster HAL API to the message-based GoogleKeymaster API.
//##
cc_library_shared {
    name: "libkeymaster1",
    srcs: [
        "aead_mode_operation.cpp",
        "aes_key.cpp",
        "aes_operation.cpp",
        "asymmetric_key.cpp",
        "ec_key.cpp",
        "ecdsa_operation.cpp",
        "google_keymaster.cpp",
        "google_keymaster_messages.cpp",
        "google_keymaster_utils.cpp",
        "hkdf.cpp",
        "hmac.cpp",
        "hmac_key.cpp",
        "hmac_operation.cpp",
        "key.cpp",
        "ocb.c",
        "openssl_err.cpp",
        "openssl_utils.cpp",
        "operation.cpp",
        "operation_table.cpp",
        "rsa_key.cpp",
        "rsa_operation.cpp",
        "symmetric_key.cpp",
        "unencrypted_key_blob.cpp",
    ],
    local_include_dirs: ["include"],
    shared_libs: [
        "libcrypto",
        "libkeymaster_messages",
    ],
    cflags: [
        "-Wall",
        "-Werror",
    ],
    // Ignore benigh warnings for now.
    clang_cflags: ["-Wno-error=unused-private-field"],
    export_include_dirs: ["include"],
}

//##
// libsoftkeymaster provides a software-based keymaster HAL implementation.
// This is used by keystore as a fallback for when the hardware keymaster does
// not support the request.
//##
cc_library_shared {
    name: "libsoftkeymasterdevice",
    srcs: [
        "soft_keymaster_device.cpp",
        "soft_keymaster_logger.cpp",
    ],
    include_dirs: ["system/security/keystore"],
    local_include_dirs: ["include"],
    cflags: [
        "-Wall",
        "-Werror",
    ],
    clang_cflags: ["-Wno-error=unused-const-variable"],
    shared_libs: [
        "libkeymaster_messages",
        "libkeymaster1",
        "liblog",
        "libcrypto",
    ],
    export_include_dirs: ["include"],
}

// Unit tests for libkeymaster
cc_test {
    name: "libkeymaster_test",
    srcs: [
        "abstract_factory_registry_test.cpp",
        "authorization_set_test.cpp",
        "google_keymaster_messages_test.cpp",
        "google_keymaster_test.cpp",
        "google_keymaster_test_utils.cpp",
        "hkdf_test.cpp",
        "hmac_test.cpp",
        "key_blob_test.cpp",
        "keymaster_enforcement.cpp",
        "keymaster_enforcement_test.cpp",
    ],
    local_include_dirs: ["include"],
    cflags: [
        "-Wall",
        "-Werror",
    ],
    tags: ["tests"],
    shared_libs: [
        "libsoftkeymasterdevice",
        "libkeymaster_messages",
        "libkeymaster1",
        "libcrypto",
    ],

}
